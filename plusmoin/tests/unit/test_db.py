"""Test the functions that access the database directly.

In order to avoid having to setup a postgresql server for this test, we test
what the queries generated by the code look like. This has the downside of
linking the test suite very closely to the implementation.
"""
import psycopg2
from contextlib import contextmanager

from nose.tools import assert_equals, assert_true, assert_false
from nose.tools import assert_raises

from plusmoin.lib import db
from plusmoin.config import config


class MockConnection(object):
    """Class used to mock a psycopg2 connection"""
    def __init__(self, results=None, raise_error=False):
        self.queries = []
        self.results = results
        self.raise_error = raise_error

    @contextmanager
    def cursor(self):
        if self.raise_error:
            raise psycopg2.ProgrammingError()

        yield self

    def execute(self, query, params=None):
        self.queries.append((query, params))

    def fetchone(self):
        return self.results[0]

    def commit(self):
        pass


class TestDb(object):
    def setUp(self):
        config['is_slave_statement'] = 'crafty sql'

    def test_is_slave_sends_configured_statement(self):
        """Check that db.is_slave sends the configured statement to the
           PostgreSQL server
        """
        connection = MockConnection([(True,)])
        db.is_slave(connection)
        assert_equals('crafty sql', connection.queries[0][0])

    def test_is_slave_returns_query_value(self):
        """Check that db.is_slave returns the value as per the returned
           PostgreSql result
        """
        connection = MockConnection([(True,)])
        assert_true(db.is_slave(connection))
        connection = MockConnection([(False, )])
        assert_false(db.is_slave(connection))

    def test_is_slave_raises_on_empty(self):
        """Check that db.is_slave raises DbError if the result is empty"""
        connection = MockConnection([None])
        assert_raises(db.DbError, db.is_slave, connection)

    def test_is_slave_raises_on_error(self):
        """Check that db.is_slave raises DbError if psycopg raises"""
        connection = MockConnection([(True, )], raise_error=True)
        assert_raises(db.DbError, db.is_slave, connection)

    def test_create_heartbeat_sends_query(self):
        """Check that db.create_heartbeat_table sends a create table statement"""
        connection = MockConnection([(1,)])
        db.create_heartbeat_table(connection)
        assert_equals(''.join("""
              CREATE TABLE IF NOT EXISTS heartbeat(cluster_id INT,
                                                   master TEXT,
                                                   tstamp BIGINT)
            """.split()), ''.join(connection.queries[0][0].split()))

    def test_create_heartbeat_adds_first_row_if_empty(self):
        """Check that db.create_heartbeat_table adds a first row if empty"""
        connection = MockConnection([(0,)])
        db.create_heartbeat_table(connection)
        assert_equals(''.join("""
                  INSERT INTO heartbeat(cluster_id, master, tstamp)
                              VALUES(%s, %s, %s)
            """.split()), ''.join(connection.queries[2][0].split()))

    def test_create_heartbeat_does_not_add_first_row_if_present(self):
        """Check that db.create_heartbeat_table does not add a first row if
           it is present"""
        connection = MockConnection([(1,)])
        db.create_heartbeat_table(connection)
        assert_equals(2, len(connection.queries))

    def test_create_heartbeat_raises_on_error(self):
        """Check that db.create_heartbeat_table raises on psycopg errors"""
        connection = MockConnection([(1,)], raise_error=True)
        assert_raises(db.DbError, db.create_heartbeat_table, connection)

    def test_update_heatbeat_table_query(self):
        """Check that db.update_heartbeat_table sends the expected query"""
        connection = MockConnection()
        db.update_heartbeat_table(12, 'example.com:9988', 12345, connection)
        assert_equals(''.join("""
              UPDATE heartbeat SET
                cluster_id = %s,
                master = %s,
                tstamp = %s
            """.split()), ''.join(connection.queries[0][0].split()))
        assert_equals((12, 'example.com:9988', 12345), connection.queries[0][1])

    def test_update_heatbeat_raises_on_error(self):
        """Check that db.update_heartbeat_table raises on psycopg errors"""
        connection = MockConnection(raise_error=True)
        assert_raises(db.DbError, db.update_heartbeat_table,
                      12, 'host:99', 1234, connection)
